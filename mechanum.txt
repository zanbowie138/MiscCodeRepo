package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.IMU;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;

@TeleOp
public class Test extends OpMode {
    
    public DcMotorEx topLeft;
    public DcMotorEx botLeft;
    public DcMotorEx topRight;
    public DcMotorEx botRight;
    
    public IMU imu;

    
    @Override
    public void init(){
        topLeft = hardwareMap.get(DcMotorEx.class, "topLeft");
        botLeft = hardwareMap.get(DcMotorEx.class, "botLeft");
        topRight = hardwareMap.get(DcMotorEx.class, "topRight");
        botRight = hardwareMap.get(DcMotorEx.class, "botRight");
        
        topRight.setDirection(DcMotor.Direction.REVERSE);
        botRight.setDirection(DcMotor.Direction.REVERSE);
        
        imu = hardwareMap.get(IMU.class, "imu");
        
        IMU.Parameters parameters = new IMU.Parameters(new RevHubOrientationOnRobot(
        RevHubOrientationOnRobot.LogoFacingDirection.UP,
        RevHubOrientationOnRobot.UsbFacingDirection.LEFT));
        
        imu.initialize(parameters);
    }
    
    @Override
    public void loop(){
        double y = -gamepad1.left_stick_y; // Remember, Y stick is reversed!
        double x = gamepad1.left_stick_x;
        double rot = gamepad1.right_stick_x;
        
        // This button choice was made so that it is hard to hit on accident,
        // it can be freely changed based on preference.
        // The equivalent button is start on Xbox-style controllers.
        if (gamepad1.options) {
            imu.resetYaw();
        }
        
        double botHeading = imu.getRobotYawPitchRollAngles().getYaw(AngleUnit.RADIANS);

        // Rotate the movement direction counter to the bot's rotation
        double rotX = -x * Math.cos(botHeading) - y * Math.sin(botHeading);
        double rotY = -x * Math.sin(botHeading) + y * Math.cos(botHeading);
        
        rotX = rotX * 1.1;
        
        // Denominator is the largest motor power (absolute value) or 1
        // This ensures all the powers maintain the same ratio,
        // but only if at least one is out of the range [-1, 1]
        double denominator = Math.max(Math.abs(rotX) + Math.abs(rotY) + Math.abs(rot), 1);
        double topLeftPower = (rotY + rotX - rot) / denominator;
        double botLeftPower = (rotY - rotX - rot) / denominator;
        double topRightPower = (rotY - rotX + rot) / denominator;
        double botRightPower = (rotY + rotX + rot) / denominator;
        
        double slow = 0.5;
        
        topLeft.setPower(topLeftPower * slow);
        botLeft.setPower(botLeftPower * slow);
        topRight.setPower(topRightPower * slow);
        botRight.setPower(botRightPower * slow);
        
        telemetry.addData("left-x: ", gamepad1.left_stick_x);
        telemetry.addData("left-y: ", -gamepad1.left_stick_y);
        telemetry.addData("right-x: ", gamepad1.right_stick_x);
        
        telemetry.addData("bot-heading: ", botHeading);
        
        telemetry.addData("t-l: ", (rotY - rotX - rot) / denominator);
        telemetry.addData("t-r: ", (rotY + rotX + rot) / denominator);
        telemetry.addData("b-l: ", (rotY - rotX + rot) / denominator);
        telemetry.addData("b-r: ", (rotY + rotX - rot) / denominator);
    }
}